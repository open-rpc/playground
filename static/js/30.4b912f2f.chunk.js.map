{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/pascal/pascal.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"mappings":"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","file":"static/js/30.4b912f2f.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    // the default separators except `@$`\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['{', '}'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n        ['<', '>'],\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*\\\\{\\\\$REGION(\\\\s\\\\'.*\\\\')?\\\\}\"),\n            end: new RegExp(\"^\\\\s*\\\\{\\\\$ENDREGION\\\\}\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.pascal',\n    ignoreCase: true,\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    keywords: [\n        'absolute', 'abstract', 'all', 'and_then', 'array', 'as', 'asm',\n        'attribute', 'begin', 'bindable', 'case', 'class', 'const',\n        'contains', 'default', 'div', 'else', 'end', 'except',\n        'exports', 'external', 'far', 'file', 'finalization', 'finally',\n        'forward', 'generic', 'goto', 'if', 'implements', 'import', 'in',\n        'index', 'inherited', 'initialization', 'interrupt', 'is', 'label',\n        'library', 'mod', 'module', 'name', 'near', 'not', 'object', 'of',\n        'on', 'only', 'operator', 'or_else', 'otherwise', 'override',\n        'package', 'packed', 'pow', 'private', 'program', 'protected',\n        'public', 'published', 'interface', 'implementation', 'qualified',\n        'read', 'record', 'resident', 'requires', 'resourcestring',\n        'restricted', 'segment', 'set', 'shl', 'shr', 'specialize', 'stored',\n        'then', 'threadvar', 'to', 'try', 'type', 'unit', 'uses', 'var',\n        'view', 'virtual', 'dynamic', 'overload', 'reintroduce', 'with',\n        'write', 'xor', 'true', 'false', 'procedure', 'function',\n        'constructor', 'destructor', 'property', 'break', 'continue', 'exit',\n        'abort', 'while', 'do', 'for', 'raise', 'repeat', 'until'\n    ],\n    typeKeywords: [\n        'boolean', 'double', 'byte', 'integer', 'shortint', 'char',\n        'longint', 'float', 'string'\n    ],\n    operators: [\n        '=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'or',\n        '+', '-', '*', '/', '@', '&', '^', '%'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/[a-zA-Z_][\\w]*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'/, 'string', '@string'],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/'/, 'string.invalid'],\n            [/\\#\\d+/, 'string']\n        ],\n        comment: [\n            [/[^\\*\\}]+/, 'comment'],\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n            [/\\}/, 'comment', '@pop'],\n            [/[\\{]/, 'comment']\n        ],\n        string: [\n            [/[^\\\\']+/, 'string'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/\\{/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n        ],\n    },\n};\n"],"sourceRoot":""}